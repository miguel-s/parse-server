"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.needToGetAllKeys = exports.calculateSkipAndLimit = exports.findObjects = exports.getObject = void 0;

var _node = _interopRequireDefault(require("parse/node"));

var _graphqlRelay = require("graphql-relay");

var _rest = _interopRequireDefault(require("../../rest"));

var _query = require("../transformers/query");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Eslint/Prettier conflict

/* eslint-disable*/
const needToGetAllKeys = (fields, keys, parseClasses) => keys ? keys.split(',').some(keyName => {
  const key = keyName.split('.');

  if (fields[key[0]]) {
    if (fields[key[0]].type === 'Pointer') {
      const subClass = parseClasses.find(({
        className: parseClassName
      }) => fields[key[0]].targetClass === parseClassName);

      if (subClass && subClass.fields[key[1]]) {
        // Current sub key is not custom
        return false;
      }
    } else if (!key[1]) {
      // current key is not custom
      return false;
    }
  } // Key not found into Parse Schema so it's custom


  return true;
}) : true;
/* eslint-enable*/


exports.needToGetAllKeys = needToGetAllKeys;

const transformOrder = order => order.map(o => {
  const direction = o.indexOf('_ASC') > 0 ? '_ASC' : '_DESC';
  let field = o.replace(direction, '');
  field = field === 'id' ? 'objectId' : field;

  if (direction === '_ASC') {
    return `${field}`;
  } else {
    return `-${field}`;
  }
}).join(',');

const getObject = async (className, objectId, keys, include, readPreference, includeReadPreference, config, auth, info, parseClasses) => {
  const options = {};

  try {
    if (!needToGetAllKeys(parseClasses.find(({
      className: parseClassName
    }) => className === parseClassName).fields, keys, parseClasses)) {
      options.keys = keys;
    }
  } catch (e) {
    console.log(e);
  }

  if (include) {
    options.include = include;

    if (includeReadPreference) {
      options.includeReadPreference = includeReadPreference;
    }
  }

  if (readPreference) {
    options.readPreference = readPreference;
  }

  const response = await _rest.default.get(config, auth, className, objectId, options, info.clientSDK);

  if (!response.results || response.results.length == 0) {
    throw new _node.default.Error(_node.default.Error.OBJECT_NOT_FOUND, 'Object not found.');
  }

  const object = response.results[0];

  if (className === '_User') {
    delete object.sessionToken;
  }

  return object;
};

exports.getObject = getObject;

const findObjects = async (className, where, order, skipInput, first, after, last, before, keys, include, includeAll, readPreference, includeReadPreference, subqueryReadPreference, config, auth, info, selectedFields, parseClasses) => {
  if (!where) {
    where = {};
  }

  (0, _query.transformQueryInputToParse)(where, className, parseClasses);
  const skipAndLimitCalculation = calculateSkipAndLimit(skipInput, first, after, last, before, config.maxLimit);
  let {
    skip
  } = skipAndLimitCalculation;
  const {
    limit,
    needToPreCount
  } = skipAndLimitCalculation;
  let preCount = undefined;

  if (needToPreCount) {
    const preCountOptions = {
      limit: 0,
      count: true
    };

    if (readPreference) {
      preCountOptions.readPreference = readPreference;
    }

    if (Object.keys(where).length > 0 && subqueryReadPreference) {
      preCountOptions.subqueryReadPreference = subqueryReadPreference;
    }

    preCount = (await _rest.default.find(config, auth, className, where, preCountOptions, info.clientSDK)).count;

    if ((skip || 0) + limit < preCount) {
      skip = preCount - limit;
    }
  }

  const options = {};

  if (selectedFields.find(field => field.startsWith('edges.') || field.startsWith('pageInfo.'))) {
    if (limit || limit === 0) {
      options.limit = limit;
    } else {
      options.limit = 100;
    }

    if (options.limit !== 0) {
      if (order) {
        options.order = transformOrder(order);
      }

      if (skip) {
        options.skip = skip;
      }

      if (config.maxLimit && options.limit > config.maxLimit) {
        // Silently replace the limit on the query with the max configured
        options.limit = config.maxLimit;
      }

      if (!needToGetAllKeys(parseClasses.find(({
        className: parseClassName
      }) => className === parseClassName).fields, keys, parseClasses)) {
        options.keys = keys;
      }

      if (includeAll === true) {
        options.includeAll = includeAll;
      }

      if (!options.includeAll && include) {
        options.include = include;
      }

      if ((options.includeAll || options.include) && includeReadPreference) {
        options.includeReadPreference = includeReadPreference;
      }
    }
  } else {
    options.limit = 0;
  }

  if ((selectedFields.includes('count') || selectedFields.includes('pageInfo.hasPreviousPage') || selectedFields.includes('pageInfo.hasNextPage')) && !needToPreCount) {
    options.count = true;
  }

  if (readPreference) {
    options.readPreference = readPreference;
  }

  if (Object.keys(where).length > 0 && subqueryReadPreference) {
    options.subqueryReadPreference = subqueryReadPreference;
  }

  let results, count;

  if (options.count || !options.limit || options.limit && options.limit > 0) {
    const findResult = await _rest.default.find(config, auth, className, where, options, info.clientSDK);
    results = findResult.results;
    count = findResult.count;
  }

  let edges = null;
  let pageInfo = null;

  if (results) {
    edges = results.map((result, index) => ({
      cursor: (0, _graphqlRelay.offsetToCursor)((skip || 0) + index),
      node: result
    }));
    pageInfo = {
      hasPreviousPage: (preCount && preCount > 0 || count && count > 0) && skip !== undefined && skip > 0,
      startCursor: (0, _graphqlRelay.offsetToCursor)(skip || 0),
      endCursor: (0, _graphqlRelay.offsetToCursor)((skip || 0) + (results.length || 1) - 1),
      hasNextPage: (preCount || count) > (skip || 0) + results.length
    };
  }

  return {
    edges,
    pageInfo,
    count: preCount || count
  };
};

exports.findObjects = findObjects;

const calculateSkipAndLimit = (skipInput, first, after, last, before, maxLimit) => {
  let skip = undefined;
  let limit = undefined;
  let needToPreCount = false; // Validates the skip input

  if (skipInput || skipInput === 0) {
    if (skipInput < 0) {
      throw new _node.default.Error(_node.default.Error.INVALID_QUERY, 'Skip should be a positive number');
    }

    skip = skipInput;
  } // Validates the after param


  if (after) {
    after = (0, _graphqlRelay.cursorToOffset)(after);

    if (!after && after !== 0 || after < 0) {
      throw new _node.default.Error(_node.default.Error.INVALID_QUERY, 'After is not a valid cursor');
    } // If skip and after are passed, a new skip is calculated by adding them


    skip = (skip || 0) + (after + 1);
  } // Validates the first param


  if (first || first === 0) {
    if (first < 0) {
      throw new _node.default.Error(_node.default.Error.INVALID_QUERY, 'First should be a positive number');
    } // The first param is translated to the limit param of the Parse legacy API


    limit = first;
  } // Validates the before param


  if (before || before === 0) {
    // This method converts the cursor to the index of the object
    before = (0, _graphqlRelay.cursorToOffset)(before);

    if (!before && before !== 0 || before < 0) {
      throw new _node.default.Error(_node.default.Error.INVALID_QUERY, 'Before is not a valid cursor');
    }

    if ((skip || 0) >= before) {
      // If the before index is less then the skip, no objects will be returned
      limit = 0;
    } else if (!limit && limit !== 0 || (skip || 0) + limit > before) {
      // If there is no limit set, the limit is calculated. Or, if the limit (plus skip) is bigger than the before index, the new limit is set.
      limit = before - (skip || 0);
    }
  } // Validates the last param


  if (last || last === 0) {
    if (last < 0) {
      throw new _node.default.Error(_node.default.Error.INVALID_QUERY, 'Last should be a positive number');
    }

    if (last > maxLimit) {
      // Last can't be bigger than Parse server maxLimit config.
      last = maxLimit;
    }

    if (limit || limit === 0) {
      // If there is a previous limit set, it may be adjusted
      if (last < limit) {
        // if last is less than the current limit
        skip = (skip || 0) + (limit - last); // The skip is adjusted

        limit = last; // the limit is adjusted
      }
    } else if (last === 0) {
      // No objects will be returned
      limit = 0;
    } else {
      // No previous limit set, the limit will be equal to last and pre count is needed.
      limit = last;
      needToPreCount = true;
    }
  }

  return {
    skip,
    limit,
    needToPreCount
  };
};

exports.calculateSkipAndLimit = calculateSkipAndLimit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9HcmFwaFFML2hlbHBlcnMvb2JqZWN0c1F1ZXJpZXMuanMiXSwibmFtZXMiOlsibmVlZFRvR2V0QWxsS2V5cyIsImZpZWxkcyIsImtleXMiLCJwYXJzZUNsYXNzZXMiLCJzcGxpdCIsInNvbWUiLCJrZXlOYW1lIiwia2V5IiwidHlwZSIsInN1YkNsYXNzIiwiZmluZCIsImNsYXNzTmFtZSIsInBhcnNlQ2xhc3NOYW1lIiwidGFyZ2V0Q2xhc3MiLCJ0cmFuc2Zvcm1PcmRlciIsIm9yZGVyIiwibWFwIiwibyIsImRpcmVjdGlvbiIsImluZGV4T2YiLCJmaWVsZCIsInJlcGxhY2UiLCJqb2luIiwiZ2V0T2JqZWN0Iiwib2JqZWN0SWQiLCJpbmNsdWRlIiwicmVhZFByZWZlcmVuY2UiLCJpbmNsdWRlUmVhZFByZWZlcmVuY2UiLCJjb25maWciLCJhdXRoIiwiaW5mbyIsIm9wdGlvbnMiLCJlIiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwicmVzdCIsImdldCIsImNsaWVudFNESyIsInJlc3VsdHMiLCJsZW5ndGgiLCJQYXJzZSIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsIm9iamVjdCIsInNlc3Npb25Ub2tlbiIsImZpbmRPYmplY3RzIiwid2hlcmUiLCJza2lwSW5wdXQiLCJmaXJzdCIsImFmdGVyIiwibGFzdCIsImJlZm9yZSIsImluY2x1ZGVBbGwiLCJzdWJxdWVyeVJlYWRQcmVmZXJlbmNlIiwic2VsZWN0ZWRGaWVsZHMiLCJza2lwQW5kTGltaXRDYWxjdWxhdGlvbiIsImNhbGN1bGF0ZVNraXBBbmRMaW1pdCIsIm1heExpbWl0Iiwic2tpcCIsImxpbWl0IiwibmVlZFRvUHJlQ291bnQiLCJwcmVDb3VudCIsInVuZGVmaW5lZCIsInByZUNvdW50T3B0aW9ucyIsImNvdW50IiwiT2JqZWN0Iiwic3RhcnRzV2l0aCIsImluY2x1ZGVzIiwiZmluZFJlc3VsdCIsImVkZ2VzIiwicGFnZUluZm8iLCJyZXN1bHQiLCJpbmRleCIsImN1cnNvciIsIm5vZGUiLCJoYXNQcmV2aW91c1BhZ2UiLCJzdGFydEN1cnNvciIsImVuZEN1cnNvciIsImhhc05leHRQYWdlIiwiSU5WQUxJRF9RVUVSWSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7O0FBQ0E7QUFDQSxNQUFNQSxnQkFBZ0IsR0FBRyxDQUFDQyxNQUFELEVBQVNDLElBQVQsRUFBZUMsWUFBZixLQUN2QkQsSUFBSSxHQUNBQSxJQUFJLENBQUNFLEtBQUwsQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQkMsT0FBTyxJQUFJO0FBQzlCLFFBQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDRixLQUFSLENBQWMsR0FBZCxDQUFaOztBQUNBLE1BQUlILE1BQU0sQ0FBQ00sR0FBRyxDQUFDLENBQUQsQ0FBSixDQUFWLEVBQW9CO0FBQ2xCLFFBQUlOLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLENBQUQsQ0FBSixDQUFOLENBQWVDLElBQWYsS0FBd0IsU0FBNUIsRUFBdUM7QUFDckMsWUFBTUMsUUFBUSxHQUFHTixZQUFZLENBQUNPLElBQWIsQ0FDZixDQUFDO0FBQUVDLFFBQUFBLFNBQVMsRUFBRUM7QUFBYixPQUFELEtBQ0VYLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLENBQUQsQ0FBSixDQUFOLENBQWVNLFdBQWYsS0FBK0JELGNBRmxCLENBQWpCOztBQUlBLFVBQUlILFFBQVEsSUFBSUEsUUFBUSxDQUFDUixNQUFULENBQWdCTSxHQUFHLENBQUMsQ0FBRCxDQUFuQixDQUFoQixFQUF5QztBQUN2QztBQUNBLGVBQU8sS0FBUDtBQUNEO0FBQ0YsS0FURCxNQVNPLElBQUksQ0FBQ0EsR0FBRyxDQUFDLENBQUQsQ0FBUixFQUFhO0FBQ2xCO0FBQ0EsYUFBTyxLQUFQO0FBQ0Q7QUFDRixHQWhCNkIsQ0FpQjlCOzs7QUFDQSxTQUFPLElBQVA7QUFDRCxDQW5CRCxDQURBLEdBcUJBLElBdEJOO0FBdUJBOzs7OztBQUVBLE1BQU1PLGNBQWMsR0FBR0MsS0FBSyxJ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QU47QUFJRDs7QUFFRCxRQUFJN0IsSUFBSSxHQUFHTyxRQUFYLEVBQXFCO0FBQ25CO0FBQ0FQLE1BQUFBLElBQUksR0FBR08sUUFBUDtBQUNEOztBQUVELFFBQUlFLEtBQUssSUFBSUEsS0FBSyxLQUFLLENBQXZCLEVBQTBCO0FBQ3hCO0FBQ0EsVUFBSVQsSUFBSSxHQUFHUyxLQUFYLEVBQWtCO0FBQ2hCO0FBQ0FELFFBQUFBLElBQUksR0FBRyxDQUFDQSxJQUFJLElBQUksQ0FBVCxLQUFlQyxLQUFLLEdBQUdULElBQXZCLENBQVAsQ0FGZ0IsQ0FFcUI7O0FBQ3JDUyxRQUFBQSxLQUFLLEdBQUdULElBQVIsQ0FIZ0IsQ0FHRjtBQUNmO0FBQ0YsS0FQRCxNQU9PLElBQUlBLElBQUksS0FBSyxDQUFiLEVBQWdCO0FBQ3JCO0FBQ0FTLE1BQUFBLEtBQUssR0FBRyxDQUFSO0FBQ0QsS0FITSxNQUdBO0FBQ0w7QUFDQUEsTUFBQUEsS0FBSyxHQUFHVCxJQUFSO0FBQ0FVLE1BQUFBLGNBQWMsR0FBRyxJQUFqQjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTztBQUNMRixJQUFBQSxJQURLO0FBRUxDLElBQUFBLEtBRks7QUFHTEMsSUFBQUE7QUFISyxHQUFQO0FBS0QsQ0F6R0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgeyBvZmZzZXRUb0N1cnNvciwgY3Vyc29yVG9PZmZzZXQgfSBmcm9tICdncmFwaHFsLXJlbGF5JztcbmltcG9ydCByZXN0IGZyb20gJy4uLy4uL3Jlc3QnO1xuaW1wb3J0IHsgdHJhbnNmb3JtUXVlcnlJbnB1dFRvUGFyc2UgfSBmcm9tICcuLi90cmFuc2Zvcm1lcnMvcXVlcnknO1xuXG4vLyBFc2xpbnQvUHJldHRpZXIgY29uZmxpY3Rcbi8qIGVzbGludC1kaXNhYmxlKi9cbmNvbnN0IG5lZWRUb0dldEFsbEtleXMgPSAoZmllbGRzLCBrZXlzLCBwYXJzZUNsYXNzZXMpID0+XG4gIGtleXNcbiAgICA/IGtleXMuc3BsaXQoJywnKS5zb21lKGtleU5hbWUgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlOYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgIGlmIChmaWVsZHNba2V5WzBdXSkge1xuICAgICAgICAgIGlmIChmaWVsZHNba2V5WzBdXS50eXBlID09PSAnUG9pbnRlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YkNsYXNzID0gcGFyc2VDbGFzc2VzLmZpbmQoXG4gICAgICAgICAgICAgICh7IGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWUgfSkgPT5cbiAgICAgICAgICAgICAgICBmaWVsZHNba2V5WzBdXS50YXJnZXRDbGFzcyA9PT0gcGFyc2VDbGFzc05hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoc3ViQ2xhc3MgJiYgc3ViQ2xhc3MuZmllbGRzW2tleVsxXV0pIHtcbiAgICAgICAgICAgICAgLy8gQ3VycmVudCBzdWIga2V5IGlzIG5vdCBjdXN0b21cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWtleVsxXSkge1xuICAgICAgICAgICAgLy8gY3VycmVudCBrZXkgaXMgbm90IGN1c3RvbVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBLZXkgbm90IGZvdW5kIGludG8gUGFyc2UgU2NoZW1hIHNvIGl0J3MgY3VzdG9tXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSlcbiAgICA6IHRydWU7XG4vKiBlc2xpbnQtZW5hYmxlKi9cblxuY29uc3QgdHJhbnNmb3JtT3JkZXIgPSBvcmRlciA9PlxuICBvcmRlclxuICAgIC5tYXAobyA9PiB7XG4gICAgICBjb25zdCBkaXJlY3Rpb24gPSBvLmluZGV4T2YoJ19BU0MnKSA+IDAgPyAnX0FTQycgOiAnX0RFU0MnO1xuICAgICAgbGV0IGZpZWxkID0gby5yZXBsYWNlKGRpcmVjdGlvbiwgJycpO1xuICAgICAgZmllbGQgPSBmaWVsZCA9PT0gJ2lkJyA/ICdvYmplY3RJZCcgOiBmaWVsZDtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdfQVNDJykge1xuICAgICAgICByZXR1cm4gYCR7ZmllbGR9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBgLSR7ZmllbGR9YDtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5qb2luKCcsJyk7XG5cbmNvbnN0IGdldE9iamVjdCA9IGFzeW5jIChcbiAgY2xhc3NOYW1lLFxuICBvYmplY3RJZCxcbiAga2V5cyxcbiAgaW5jbHVkZSxcbiAgcmVhZFByZWZlcmVuY2UsXG4gIGluY2x1ZGVSZWFkUHJlZmVyZW5jZSxcbiAgY29uZmlnLFxuICBhdXRoLFxuICBpbmZvLFxuICBwYXJzZUNsYXNzZXNcbikgPT4ge1xuICBjb25zdCBvcHRpb25zID0ge307XG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgIW5lZWRUb0dldEFsbEtleXMoXG4gICAgICAgIHBhcnNlQ2xhc3Nlcy5maW5kKFxuICAgICAgICAgICh7IGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWUgfSkgPT4gY2xhc3NOYW1lID09PSBwYXJzZUNsYXNzTmFtZVxuICAgICAgICApLmZpZWxkcyxcbiAgICAgICAga2V5cyxcbiAgICAgICAgcGFyc2VDbGFzc2VzXG4gICAgICApXG4gICAgKSB7XG4gICAgICBvcHRpb25zLmtleXMgPSBrZXlzO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICB9XG4gIGlmIChpbmNsdWRlKSB7XG4gICAgb3B0aW9ucy5pbmNsdWRlID0gaW5jbHVkZTtcbiAgICBpZiAoaW5jbHVkZVJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICBvcHRpb25zLmluY2x1ZGVSZWFkUHJlZmVyZW5jZSA9IGluY2x1ZGVSZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlYWRQcmVmZXJlbmNlKSB7XG4gICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IHJlYWRQcmVmZXJlbmNlO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXN0LmdldChcbiAgICBjb25maWcsXG4gICAgYXV0aCxcbiAgICBjbGFzc05hbWUsXG4gICAgb2JqZWN0SWQsXG4gICAgb3B0aW9ucyxcbiAgICBpbmZvLmNsaWVudFNES1xuICApO1xuXG4gIGlmICghcmVzcG9uc2UucmVzdWx0cyB8fCByZXNwb25zZS5yZXN1bHRzLmxlbmd0aCA9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsICdPYmplY3Qgbm90IGZvdW5kLicpO1xuICB9XG5cbiAgY29uc3Qgb2JqZWN0ID0gcmVzcG9uc2UucmVzdWx0c1swXTtcbiAgaWYgKGNsYXNzTmFtZSA9PT0gJ19Vc2VyJykge1xuICAgIGRlbGV0ZSBvYmplY3Quc2Vzc2lvblRva2VuO1xuICB9XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5jb25zdCBmaW5kT2JqZWN0cyA9IGFzeW5jIChcbiAgY2xhc3NOYW1lLFxuICB3aGVyZSxcbiAgb3JkZXIsXG4gIHNraXBJbnB1dCxcbiAgZmlyc3QsXG4gIGFmdGVyLFxuICBsYXN0LFxuICBiZWZvcmUsXG4gIGtleXMsXG4gIGluY2x1ZGUsXG4gIGluY2x1ZGVBbGwsXG4gIHJlYWRQcmVmZXJlbmNlLFxuICBpbmNsdWRlUmVhZFByZWZlcmVuY2UsXG4gIHN1YnF1ZXJ5UmVhZFByZWZlcmVuY2UsXG4gIGNvbmZpZyxcbiAgYXV0aCxcbiAgaW5mbyxcbiAgc2VsZWN0ZWRGaWVsZHMsXG4gIHBhcnNlQ2xhc3Nlc1xuKSA9PiB7XG4gIGlmICghd2hlcmUpIHtcbiAgICB3aGVyZSA9IHt9O1xuICB9XG4gIHRyYW5zZm9ybVF1ZXJ5SW5wdXRUb1BhcnNlKHdoZXJlLCBjbGFzc05hbWUsIHBhcnNlQ2xhc3Nlcyk7XG4gIGNvbnN0IHNraXBBbmRMaW1pdENhbGN1bGF0aW9uID0gY2FsY3VsYXRlU2tpcEFuZExpbWl0KFxuICAgIHNraXBJbnB1dCxcbiAgICBmaXJzdCxcbiAgICBhZnRlcixcbiAgICBsYXN0LFxuICAgIGJlZm9yZSxcbiAgICBjb25maWcubWF4TGltaXRcbiAgKTtcbiAgbGV0IHsgc2tpcCB9ID0gc2tpcEFuZExpbWl0Q2FsY3VsYXRpb247XG4gIGNvbnN0IHsgbGltaXQsIG5lZWRUb1ByZUNvdW50IH0gPSBza2lwQW5kTGltaXRDYWxjdWxhdGlvbjtcbiAgbGV0IHByZUNvdW50ID0gdW5kZWZpbmVkO1xuICBpZiAobmVlZFRvUHJlQ291bnQpIHtcbiAgICBjb25zdCBwcmVDb3VudE9wdGlvbnMgPSB7XG4gICAgICBsaW1pdDogMCxcbiAgICAgIGNvdW50OiB0cnVlLFxuICAgIH07XG4gICAgaWYgKHJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICBwcmVDb3VudE9wdGlvbnMucmVhZFByZWZlcmVuY2UgPSByZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKHdoZXJlKS5sZW5ndGggPiAwICYmIHN1YnF1ZXJ5UmVhZFByZWZlcmVuY2UpIHtcbiAgICAgIHByZUNvdW50T3B0aW9ucy5zdWJxdWVyeVJlYWRQcmVmZXJlbmNlID0gc3VicXVlcnlSZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gICAgcHJlQ291bnQgPSAoXG4gICAgICBhd2FpdCByZXN0LmZpbmQoXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgYXV0aCxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICB3aGVyZSxcbiAgICAgICAgcHJlQ291bnRPcHRpb25zLFxuICAgICAgICBpbmZvLmNsaWVudFNES1xuICAgICAgKVxuICAgICkuY291bnQ7XG4gICAgaWYgKChza2lwIHx8IDApICsgbGltaXQgPCBwcmVDb3VudCkge1xuICAgICAgc2tpcCA9IHByZUNvdW50IC0gbGltaXQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gIGlmIChcbiAgICBzZWxlY3RlZEZpZWxkcy5maW5kKFxuICAgICAgZmllbGQgPT4gZmllbGQuc3RhcnRzV2l0aCgnZWRnZXMuJykgfHwgZmllbGQuc3RhcnRzV2l0aCgncGFnZUluZm8uJylcbiAgICApXG4gICkge1xuICAgIGlmIChsaW1pdCB8fCBsaW1pdCA9PT0gMCkge1xuICAgICAgb3B0aW9ucy5saW1pdCA9IGxpbWl0O1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLmxpbWl0ID0gMTAwO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5saW1pdCAhPT0gMCkge1xuICAgICAgaWYgKG9yZGVyKSB7XG4gICAgICAgIG9wdGlvbnMub3JkZXIgPSB0cmFuc2Zvcm1PcmRlcihvcmRlcik7XG4gICAgICB9XG4gICAgICBpZiAoc2tpcCkge1xuICAgICAgICBvcHRpb25zLnNraXAgPSBza2lwO1xuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy5tYXhMaW1pdCAmJiBvcHRpb25zLmxpbWl0ID4gY29uZmlnLm1heExpbWl0KSB7XG4gICAgICAgIC8vIFNpbGVudGx5IHJlcGxhY2UgdGhlIGxpbWl0IG9uIHRoZSBxdWVyeSB3aXRoIHRoZSBtYXggY29uZmlndXJlZFxuICAgICAgICBvcHRpb25zLmxpbWl0ID0gY29uZmlnLm1heExpbWl0O1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAhbmVlZFRvR2V0QWxsS2V5cyhcbiAgICAgICAgICBwYXJzZUNsYXNzZXMuZmluZChcbiAgICAgICAgICAgICh7IGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWUgfSkgPT4gY2xhc3NOYW1lID09PSBwYXJzZUNsYXNzTmFtZVxuICAgICAgICAgICkuZmllbGRzLFxuICAgICAgICAgIGtleXMsXG4gICAgICAgICAgcGFyc2VDbGFzc2VzXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBvcHRpb25zLmtleXMgPSBrZXlzO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgb3B0aW9ucy5pbmNsdWRlQWxsID0gaW5jbHVkZUFsbDtcbiAgICAgIH1cbiAgICAgIGlmICghb3B0aW9ucy5pbmNsdWRlQWxsICYmIGluY2x1ZGUpIHtcbiAgICAgICAgb3B0aW9ucy5pbmNsdWRlID0gaW5jbHVkZTtcbiAgICAgIH1cbiAgICAgIGlmICgob3B0aW9ucy5pbmNsdWRlQWxsIHx8IG9wdGlvbnMuaW5jbHVkZSkgJiYgaW5jbHVkZVJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgIG9wdGlvbnMuaW5jbHVkZVJlYWRQcmVmZXJlbmNlID0gaW5jbHVkZVJlYWRQcmVmZXJlbmNlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zLmxpbWl0ID0gMDtcbiAgfVxuXG4gIGlmIChcbiAgICAoc2VsZWN0ZWRGaWVsZHMuaW5jbHVkZXMoJ2NvdW50JykgfHxcbiAgICAgIHNlbGVjdGVkRmllbGRzLmluY2x1ZGVzKCdwYWdlSW5mby5oYXNQcmV2aW91c1BhZ2UnKSB8fFxuICAgICAgc2VsZWN0ZWRGaWVsZHMuaW5jbHVkZXMoJ3BhZ2VJbmZvLmhhc05leHRQYWdlJykpICYmXG4gICAgIW5lZWRUb1ByZUNvdW50XG4gICkge1xuICAgIG9wdGlvbnMuY291bnQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHJlYWRQcmVmZXJlbmNlKSB7XG4gICAgb3B0aW9ucy5yZWFkUHJlZmVyZW5jZSA9IHJlYWRQcmVmZXJlbmNlO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyh3aGVyZSkubGVuZ3RoID4gMCAmJiBzdWJxdWVyeVJlYWRQcmVmZXJlbmNlKSB7XG4gICAgb3B0aW9ucy5zdWJxdWVyeVJlYWRQcmVmZXJlbmNlID0gc3VicXVlcnlSZWFkUHJlZmVyZW5jZTtcbiAgfVxuXG4gIGxldCByZXN1bHRzLCBjb3VudDtcbiAgaWYgKG9wdGlvbnMuY291bnQgfHwgIW9wdGlvbnMubGltaXQgfHwgKG9wdGlvbnMubGltaXQgJiYgb3B0aW9ucy5saW1pdCA+IDApKSB7XG4gICAgY29uc3QgZmluZFJlc3VsdCA9IGF3YWl0IHJlc3QuZmluZChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGF1dGgsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICB3aGVyZSxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBpbmZvLmNsaWVudFNES1xuICAgICk7XG4gICAgcmVzdWx0cyA9IGZpbmRSZXN1bHQucmVzdWx0cztcbiAgICBjb3VudCA9IGZpbmRSZXN1bHQuY291bnQ7XG4gIH1cblxuICBsZXQgZWRnZXMgPSBudWxsO1xuICBsZXQgcGFnZUluZm8gPSBudWxsO1xuICBpZiAocmVzdWx0cykge1xuICAgIGVkZ2VzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCwgaW5kZXgpID0+ICh7XG4gICAgICBjdXJzb3I6IG9mZnNldFRvQ3Vyc29yKChza2lwIHx8IDApICsgaW5kZXgpLFxuICAgICAgbm9kZTogcmVzdWx0LFxuICAgIH0pKTtcblxuICAgIHBhZ2VJbmZvID0ge1xuICAgICAgaGFzUHJldmlvdXNQYWdlOlxuICAgICAgICAoKHByZUNvdW50ICYmIHByZUNvdW50ID4gMCkgfHwgKGNvdW50ICYmIGNvdW50ID4gMCkpICYmXG4gICAgICAgIHNraXAgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBza2lwID4gMCxcbiAgICAgIHN0YXJ0Q3Vyc29yOiBvZmZzZXRUb0N1cnNvcihza2lwIHx8IDApLFxuICAgICAgZW5kQ3Vyc29yOiBvZmZzZXRUb0N1cnNvcigoc2tpcCB8fCAwKSArIChyZXN1bHRzLmxlbmd0aCB8fCAxKSAtIDEpLFxuICAgICAgaGFzTmV4dFBhZ2U6IChwcmVDb3VudCB8fCBjb3VudCkgPiAoc2tpcCB8fCAwKSArIHJlc3VsdHMubGVuZ3RoLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVkZ2VzLFxuICAgIHBhZ2VJbmZvLFxuICAgIGNvdW50OiBwcmVDb3VudCB8fCBjb3VudCxcbiAgfTtcbn07XG5cbmNvbnN0IGNhbGN1bGF0ZVNraXBBbmRMaW1pdCA9IChcbiAgc2tpcElucHV0LFxuICBmaXJzdCxcbiAgYWZ0ZXIsXG4gIGxhc3QsXG4gIGJlZm9yZSxcbiAgbWF4TGltaXRcbikgPT4ge1xuICBsZXQgc2tpcCA9IHVuZGVmaW5lZDtcbiAgbGV0IGxpbWl0ID0gdW5kZWZpbmVkO1xuICBsZXQgbmVlZFRvUHJlQ291bnQgPSBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZXMgdGhlIHNraXAgaW5wdXRcbiAgaWYgKHNraXBJbnB1dCB8fCBza2lwSW5wdXQgPT09IDApIHtcbiAgICBpZiAoc2tpcElucHV0IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5JTlZBTElEX1FVRVJZLFxuICAgICAgICAnU2tpcCBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXInXG4gICAgICApO1xuICAgIH1cbiAgICBza2lwID0gc2tpcElucHV0O1xuICB9XG5cbiAgLy8gVmFsaWRhdGVzIHRoZSBhZnRlciBwYXJhbVxuICBpZiAoYWZ0ZXIpIHtcbiAgICBhZnRlciA9IGN1cnNvclRvT2Zmc2V0KGFmdGVyKTtcbiAgICBpZiAoKCFhZnRlciAmJiBhZnRlciAhPT0gMCkgfHwgYWZ0ZXIgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfUVVFUlksXG4gICAgICAgICdBZnRlciBpcyBub3QgYSB2YWxpZCBjdXJzb3InXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIElmIHNraXAgYW5kIGFmdGVyIGFyZSBwYXNzZWQsIGEgbmV3IHNraXAgaXMgY2FsY3VsYXRlZCBieSBhZGRpbmcgdGhlbVxuICAgIHNraXAgPSAoc2tpcCB8fCAwKSArIChhZnRlciArIDEpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGVzIHRoZSBmaXJzdCBwYXJhbVxuICBpZiAoZmlyc3QgfHwgZmlyc3QgPT09IDApIHtcbiAgICBpZiAoZmlyc3QgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfUVVFUlksXG4gICAgICAgICdGaXJzdCBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXInXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFRoZSBmaXJzdCBwYXJhbSBpcyB0cmFuc2xhdGVkIHRvIHRoZSBsaW1pdCBwYXJhbSBvZiB0aGUgUGFyc2UgbGVnYWN5IEFQSVxuICAgIGxpbWl0ID0gZmlyc3Q7XG4gIH1cblxuICAvLyBWYWxpZGF0ZXMgdGhlIGJlZm9yZSBwYXJhbVxuICBpZiAoYmVmb3JlIHx8IGJlZm9yZSA9PT0gMCkge1xuICAgIC8vIFRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBjdXJzb3IgdG8gdGhlIGluZGV4IG9mIHRoZSBvYmplY3RcbiAgICBiZWZvcmUgPSBjdXJzb3JUb09mZnNldChiZWZvcmUpO1xuICAgIGlmICgoIWJlZm9yZSAmJiBiZWZvcmUgIT09IDApIHx8IGJlZm9yZSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuSU5WQUxJRF9RVUVSWSxcbiAgICAgICAgJ0JlZm9yZSBpcyBub3QgYSB2YWxpZCBjdXJzb3InXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICgoc2tpcCB8fCAwKSA+PSBiZWZvcmUpIHtcbiAgICAgIC8vIElmIHRoZSBiZWZvcmUgaW5kZXggaXMgbGVzcyB0aGVuIHRoZSBza2lwLCBubyBvYmplY3RzIHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgIGxpbWl0ID0gMDtcbiAgICB9IGVsc2UgaWYgKCghbGltaXQgJiYgbGltaXQgIT09IDApIHx8IChza2lwIHx8IDApICsgbGltaXQgPiBiZWZvcmUpIHtcbiAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGxpbWl0IHNldCwgdGhlIGxpbWl0IGlzIGNhbGN1bGF0ZWQuIE9yLCBpZiB0aGUgbGltaXQgKHBsdXMgc2tpcCkgaXMgYmlnZ2VyIHRoYW4gdGhlIGJlZm9yZSBpbmRleCwgdGhlIG5ldyBsaW1pdCBpcyBzZXQuXG4gICAgICBsaW1pdCA9IGJlZm9yZSAtIChza2lwIHx8IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFZhbGlkYXRlcyB0aGUgbGFzdCBwYXJhbVxuICBpZiAobGFzdCB8fCBsYXN0ID09PSAwKSB7XG4gICAgaWYgKGxhc3QgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLklOVkFMSURfUVVFUlksXG4gICAgICAgICdMYXN0IHNob3VsZCBiZSBhIHBvc2l0aXZlIG51bWJlcidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3QgPiBtYXhMaW1pdCkge1xuICAgICAgLy8gTGFzdCBjYW4ndCBiZSBiaWdnZXIgdGhhbiBQYXJzZSBzZXJ2ZXIgbWF4TGltaXQgY29uZmlnLlxuICAgICAgbGFzdCA9IG1heExpbWl0O1xuICAgIH1cblxuICAgIGlmIChsaW1pdCB8fCBsaW1pdCA9PT0gMCkge1xuICAgICAgLy8gSWYgdGhlcmUgaXMgYSBwcmV2aW91cyBsaW1pdCBzZXQsIGl0IG1heSBiZSBhZGp1c3RlZFxuICAgICAgaWYgKGxhc3QgPCBsaW1pdCkge1xuICAgICAgICAvLyBpZiBsYXN0IGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudCBsaW1pdFxuICAgICAgICBza2lwID0gKHNraXAgfHwgMCkgKyAobGltaXQgLSBsYXN0KTsgLy8gVGhlIHNraXAgaXMgYWRqdXN0ZWRcbiAgICAgICAgbGltaXQgPSBsYXN0OyAvLyB0aGUgbGltaXQgaXMgYWRqdXN0ZWRcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09IDApIHtcbiAgICAgIC8vIE5vIG9iamVjdHMgd2lsbCBiZSByZXR1cm5lZFxuICAgICAgbGltaXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBwcmV2aW91cyBsaW1pdCBzZXQsIHRoZSBsaW1pdCB3aWxsIGJlIGVxdWFsIHRvIGxhc3QgYW5kIHByZSBjb3VudCBpcyBuZWVkZWQuXG4gICAgICBsaW1pdCA9IGxhc3Q7XG4gICAgICBuZWVkVG9QcmVDb3VudCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgc2tpcCxcbiAgICBsaW1pdCxcbiAgICBuZWVkVG9QcmVDb3VudCxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IGdldE9iamVjdCwgZmluZE9iamVjdHMsIGNhbGN1bGF0ZVNraXBBbmRMaW1pdCwgbmVlZFRvR2V0QWxsS2V5cyB9O1xuIl19